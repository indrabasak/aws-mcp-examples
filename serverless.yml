service: aws-mcp-examples

frameworkVersion: '3'

provider:
  name: aws
#  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  architecture: arm64
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
  cfnRole: arn:aws:iam::${aws:accountId}:role/AdskCfnAdministratorAccessExecutionRole

  # IAM role is defined in CloudFormation resources section

  ecr:
    images:
      appimage:
        path: ./
#        file: Dockerfile
#        platform: linux/amd64
        platform: linux/arm64
        provenance: false

  # API Gateway configuration
#  apiGateway:
#    description: MCP Examples API
#    binaryMediaTypes:
#      - '*/*'
  httpApi:
    cors: true

  # CloudFormation stack tags
  stackTags:
    Project: aws-mcp-examples
    Environment: ${self:provider.stage}

plugins:
  # - serverless-plugin-typescript
  - serverless-offline

custom:
  # Serverless Offline configuration
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0

#package:
#  individually: false
#  exclude:
#    - ./**
#    - '!node_modules/**'
#  include:
#    - run.sh
#    - dist/**

functions:
  # Original MCP handlers
#  getMcp:
#    handler: src/handlers/get-mcp.handler
#    description: GET /mcp endpoint handler
#    events:
#      - http:
#          path: mcp
#          method: get
#          cors:
#            origin: '*'
#            headers:
#              - Content-Type
#              - X-Amz-Date
#              - Authorization
#              - X-Api-Key
#              - X-Amz-Security-Token
#              - X-Amz-User-Agent
#            allowCredentials: false
#
#  postMcp:
#    handler: src/handlers/post-mcp.handler
#    description: POST /mcp endpoint handler
#    events:
#      - http:
#          path: mcp
#          method: post
#          cors:
#            origin: '*'
#            headers:
#              - Content-Type
#              - X-Amz-Date
#              - Authorization
#              - X-Api-Key
#              - X-Amz-Security-Token
#              - X-Amz-User-Agent
#            allowCredentials: false
#
#  deleteMcp:
#    handler: src/handlers/delete-mcp.handler
#    description: DELETE /mcp endpoint handler
#    events:
#      - http:
#          path: mcp
#          method: delete
#          cors:
#            origin: '*'
#            headers:
#              - Content-Type
#              - X-Amz-Date
#              - Authorization
#              - X-Api-Key
#              - X-Amz-Security-Token
#              - X-Amz-User-Agent
#            allowCredentials: false
#
#  Events:
#    Root:
#      Type: HttpApi
#      Properties:
#        Path: /
#        Method: ANY
#    Petstore:
#      Type: HttpApi
#      Properties:
#        Path: /{proxy+}
#        Method: ANY
  # Express app with AWS Lambda Web Adapter
  expressApp:
    description: Express application with XYZ endpoints using AWS Lambda Web Adapter
    timeout: 30
    memorySize: 512
    image:
      name: appimage
    role:
      - McpLambdaRole
    events:
      - httpApi:
          path: /
          method: '*'
      - httpApi:
          path: /{proxy+}
          method: '*'
    environment:
      PORT: 8080
      # AWS_LWA_INVOKE_MODE: buffered
      # AWS_LWA_ENABLE_COMPRESSION: true
#      AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
#    url:
#      cors: true

#  expressApp:
#    handler: run.sh
#    description: Express application with XYZ endpoints using AWS Lambda Web Adapter
#    timeout: 30
#    runtime: provided.al2023
#    events:
#      - httpApi:
#          path: /
#          method: '*'
#      - httpApi:
#          path: /{proxy+}
#          method: '*'
#    #    package:
#    #      patterns:
#    #        - 'run.sh'
#    #        - 'dist/**'
#    #        - 'node_modules/**'
#    #        - '!node_modules/aws-sdk/**'
#    #        - '!**/*.ts'
#    #        - '!src/**'
#    #        - '!tests/**'
#    #        - '!*.md'
#    #        - '!*.json'
#    #        - '!*.yml'
#    #        - '!yarn.lock'
#    environment:
#      PORT: 8080
#      AWS_LWA_INVOKE_MODE: buffered
#      AWS_LWA_ENABLE_COMPRESSION: true
#      AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
#    layers:
#      - arn:aws:lambda:${self:provider.region}:753240598075:layer:LambdaAdapterLayerX86:25
#    url:
#      cors: true

# CloudFormation resource outputs
resources:
  Resources:
    McpLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "${self:service}-mcp-lambda-role-${AWS::Region}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:service}-mcp-logs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::Sub: 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
#                    - "Fn::Join":
#                        - ":"
#                        - - "arn:aws:logs"
#                          - Ref: "AWS::Region"
#                          - Ref: "AWS::AccountId"
#                          - "log-group:/aws/lambda/${self:service}-write-event:*:*"
#  Resources:
#    IamRoleLambdaExecution:
#      Type: AWS::IAM::Role
#      Properties:
#        PermissionsBoundary:
#          Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:policy/ADSK-Boundary'
#        AssumeRolePolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service:
#                  - lambda.amazonaws.com
#              Action: sts:AssumeRole
#        Policies:
#          - PolicyName: ${self:service}-${self:provider.stage}-lambda-policy
#            PolicyDocument:
#              Version: '2012-10-17'
#              Statement:
#                - Effect: Allow
#                  Action:
#                    - logs:CreateLogGroup
#                    - logs:CreateLogStream
#                    - logs:PutLogEvents
#                  Resource:
#                    Fn::Sub: 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
#        Path: /
#        RoleName: ${self:service}-${self:provider.stage}-lambdaRole



outputs:
  expressApi:
    description: API Gateway endpoint URL for Express function
    value:
      Fn::Sub: "https://${sls:instanceId}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"

  Outputs:
#    ExpressServer:
#      Description: "ExpressServer Function ARN"
#      Value: !GetAtt expressApp.Arn
##    LlamaServerIamRole:
##      Description: "Implicit IAM Role created for LlamaServer"
##      Value: !GetAtt LlamaServerRole.Arn
#    ExpressServerUrl:
#      Description: "Function URL for LlamaServer"
#      Value: !GetAtt ExpressServerUrl.FunctionUrl
#    ApiGatewayRestApiId:
#      Value:
#        Ref: ApiGatewayRestApi
#      Export:
#        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId
#
#    ApiGatewayRestApiRootResourceId:
#      Value:
#        Fn::GetAtt:
#          - ApiGatewayRestApi
#          - RootResourceId
#      Export:
#        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId
#
#    ServiceEndpoint:
#      Description: URL of the service endpoint
#      Value:
#        Fn::Join:
#          - ''
#          - - 'https://'
#            - Ref: ApiGatewayRestApi
#            - '.execute-api.'
#            - ${self:provider.region}
#            - '.amazonaws.com/'
#            - ${self:provider.stage}
#            - '/mcp'
#      Export:
#        Name: ${self:service}-${self:provider.stage}-ServiceEndpoint
#
#    GetMcpLambdaFunctionQualifiedArn:
#      Description: GET MCP Lambda function ARN
#      Value:
#        Ref: GetMcpLambdaFunction
#      Export:
#        Name: ${self:service}-${self:provider.stage}-GetMcpLambdaFunctionQualifiedArn
#
#    PostMcpLambdaFunctionQualifiedArn:
#      Description: POST MCP Lambda function ARN
#      Value:
#        Ref: PostMcpLambdaFunction
#      Export:
#        Name: ${self:service}-${self:provider.stage}-PostMcpLambdaFunctionQualifiedArn
#
#    DeleteMcpLambdaFunctionQualifiedArn:
#      Description: DELETE MCP Lambda function ARN
#      Value:
#        Ref: DeleteMcpLambdaFunction
#      Export:
#        Name: ${self:service}-${self:provider.stage}-DeleteMcpLambdaFunctionQualifiedArn