service: aws-mcp-examples

frameworkVersion: '3'

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  architecture: arm64
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
  cfnRole: arn:aws:iam::${aws:accountId}:role/AdskCfnAdministratorAccessExecutionRole
  ecr:
    images:
      appimage:
        path: ./
        platform: linux/arm64
        provenance: false
  httpApi:
    cors: true
  # CloudFormation stack tags
  stackTags:
    Project: aws-mcp-examples
    Environment: ${self:provider.stage}

plugins:
  - serverless-offline

custom:
  # Serverless Offline configuration
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0

functions:
  expressApp:
    description: Express application with XYZ endpoints using AWS Lambda Web Adapter
    timeout: 30
    memorySize: 512
    image:
      name: appimage
    role:
      - McpLambdaRole
    events:
      - httpApi:
          path: /
          method: '*'
      - httpApi:
          path: /{proxy+}
          method: '*'
    environment:
      PORT: 8080

# CloudFormation resource outputs
resources:
  Resources:
    McpLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "${self:service}-mcp-lambda-role-${AWS::Region}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:service}-mcp-logs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::Sub: 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'


